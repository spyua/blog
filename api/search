[{"id":"content:0.index.md","path":"/","dir":"","title":"Home","description":"","keywords":[],"body":"     Hakuna Matata.   I am a dedicated learner, and together with my friend, we have formed a team called Code Sense in Kaohsiung. We engage in research and study on a weekly basis, with a passion for learning new technologies and skills.Continual learning is the driving force of my life.     8-9 years of software development and maintenance experience  3-4 years of experience in automation domain development  1-2 years of experience in department software training and management  Familiar with integration and connection of various factory systems (  MES ,   WMS ,   PLC )  Proficient in web system front-end and back-end development and database design  Well-versed in measurement instrument and motor PC Base control (  RS232 ,   ModBusTCP ,   EtherCAT )      My Personal Moments.      Reading Blog   Regular Reading and Public Journal of Thoughts and Moods.[  Medium ]    Code Sense Trello   Regular Study and Discussion Sessions with Friends.\n[  Code Sense Trello ]    Slider   My Presentation Slides.[  Slider Link ]    Technical Documentation   Regular document writing and temporary storage.[  Hackmd ]"},{"id":"content:1.api:1.components.md","path":"/api/components","dir":"api","title":"Components","description":"Discover every component you can use in your content.","keywords":["<Alert />","<Badge />","<BlockHero />","<ButtonLink />","<Callout />","<Card />","<CardGrid />","<CodeGroup />","<CodeBlock />","<CopyButton />","<Icon />","<List />","<Sandbox />","<Terminal />","<VideoPlayer />"],"body":"  Components  Discover every component you can use in your content.   <Alert />     Check out an   info  alert with   code  and a   link .   Check out a   success  alert with   code  and a   link .   Check out a   warning  alert with   code  and a   link .   Check out a   danger  alert with   code  and a   link .     ::  alert  {type  =  \"info\"  }\n   Check out an   **info**   alert with   `code`   and a [  link  ](/).\n   ::\n     ::  alert  {type  =  \"success\"  }\n   Check out a   **success**   alert with   `code`   and a [  link  ](/).\n   ::\n     ::  alert  {type  =  \"warning\"  }\n   Check out a   **warning**   alert with   `code`   and a [  link  ](/).\n   ::\n     ::  alert  {type  =  \"danger\"  }\n   Check out a   **danger**   alert with   `code`   and a [  link  ](/).\n   ::     <Badge />   <Badge />  support same types as   <Alert /> .     v1.2  Deprecated   Not found!     :  badge  [  v1.2  ]\n     :  badge  [  Deprecated  ]{  type  =  \"warning\"  }\n     ::  badge  {type  =  \"danger\"  }\n   Not found!\n   ::     <BlockHero />      Document-driven framework   Docus reconciles content creators and developers by offering to both the best tools to create and scale content-based websites.     ::  block-hero\n   ---\n   cta  :\n     -   Get started\n     -   /get-started\n   secondary  :\n     -   Open on GitHub →\n     -   https://github.com/nuxtlabs/docus\n   snippet  :   npx nuxi@latest init docus-app -t nuxtlabs/docus-starter\n   ---\n   #title\n   Document-driven framework\n     #description\n   Docus reconciles content creators and developers by offering to both the best tools to create and scale content-based websites.\n   ::     <ButtonLink />    Play on StackBlitz     :  button-link  [  Play on StackBlitz  ]{  icon  =  \"IconStackBlitz\"     href  =  \"https://stackblitz.com/github/nuxtlabs/docus-starter\"     blank  }     <Callout />   <Callout />  support same types as   <Alert /> .      This is a callout! Click me to open.   This is the content of the callout.    This is a callout! Click me to open.   This is the content of the callout.     ::  callout\n   #summary\n   This is a callout! Click me to open.\n     #content\n   This is the content of the callout.\n   ::\n    \n   ::  callout  {type  =  \"warning\"  }\n   #summary\n   This is a callout! Click me to open.\n     #content\n   This is the content of the callout.\n   ::     <Card />      Nuxt Architecture.   Based on   Nuxt 3  and   Nuxt Content .   \nUse Nuxt to build a static site, or a serverless app.      ::  card  {icon  =  \"logos:nuxt-icon\"  }\n      #title\n    Nuxt Architecture.\n      #description\n    Based on   **Nuxt 3**   and   **Nuxt Content**  . :  br\n    Use Nuxt to build a static site, or a serverless app.\n    ::     <CardGrid />      What's included?      Nuxt Architecture.   Harness the full power of Nuxt and the Nuxt ecosystem.    Vue Components.   Use built-in components (or your own!) inside your content.    Write Markdown.   Enjoy the ease and simplicity of Markdown and discover MDC syntax.     ::  card-grid\n   #title\n   What's included\n     #root\n   :  ellipsis\n     #default\n     ::  card\n       #title\n     Nuxt Architecture.\n       #description\n     Harness the full power of Nuxt and the Nuxt ecosystem.\n     ::\n     ::  card\n       #title\n     Vue Components.\n       #description\n     Use built-in components (or your own!) inside your content.\n     ::\n     ::  card\n       #title\n     Write Markdown.\n       #description\n     Enjoy the ease and simplicity of Markdown and discover MDC syntax.\n     ::\n   ::     <CodeGroup />  This component uses   slots  to create a tab panel of your code examples or preview.        yarn     add     docus     npm     install     docus     ::  code-group\n     ```bash [  Yarn  ]\n     yarn add docus\n     ```\n     ```bash [  NPM  ]\n     npm install docus\n     ```\n   ::     <CodeBlock />  To be used inside a   <CodeGroup />  component to display a preview of some rendered code.     Hello World!     /* Added as a child of   `<CodeGroup />`   */\n     ::  code-block  {label  =  \"Preview\"     preview}\n     ::  badge\n     Hello World!\n     ::\n   ::     <CopyButton />        :  copy-button  {content=\"hey!\"}     <Icon />  Icon component gives you access to all   100,000+  icons from   icones.js.org .          :  icon  {name=\"logos:nuxt-icon\"}\n   :  icon  {name=\"logos:vue\"}\n   :  icon  {name=\"logos:nuxt-icon\"}     <List />       Important  Always    Amazing  Congrats    Do you know?  You can also do this    Be careful  Use with precautions    Drinking too much  Driving drunk     ::  list  {type  =  \"primary\"  }\n   -     **Important**\n   -   Always\n   ::\n     ::  list  {type  =  \"success\"  }\n   -   Amazing\n   -   Congrats\n   ::\n     ::  list  {type  =  \"info\"  }\n   -   Do you know?\n   -   You can also do this\n   ::\n     ::  list  {type  =  \"warning\"  }\n   -   Be careful\n   -   Use with precautions\n   ::\n     ::  list  {type  =  \"danger\"  }\n   -   Drinking too much\n   -   Driving drunk\n   ::    <Sandbox />  Embed CodeSandbox/StackBlitz easily in your documentation with great performances.  Using the   IntersectionObserver  to load when visible in the viewport.        :  sandbox  {src=\"https://codesandbox.io/embed/nuxt-content-l164h?hidenavigation=1&theme=dark\"}     <Terminal />        :  terminal  {content=\"nuxi build\"}     <VideoPlayer />         ::  div\n     :  video-player  {src=\"https://www.youtube.com/watch?v=o9e12WbKrd8\"}\n   ::   .github-light_github-dark{color:#24292e;background:#fff;}.dark .github-light_github-dark{color:#e1e4e8;background:#24292e;}.ct-553616{color:#24292E;}.dark .ct-553616{color:#E1E4E8;}.ct-914029{color:#22863A;}.dark .ct-914029{color:#85E89D;}.ct-762058{color:#6F42C1;}.dark .ct-762058{color:#B392F0;}.ct-952708{color:#032F62;}.dark .ct-952708{color:#9ECBFF;}.ct-611988{color:#24292E;font-weight:bold;}.dark .ct-611988{color:#E1E4E8;font-weight:bold;}.ct-617022{color:#005CC5;}.dark .ct-617022{color:#79B8FF;}.ct-789106{color:#032F62;text-decoration:bold;}.dark .ct-789106{color:#DBEDFF;text-decoration:bold;}.ct-157101{color:#E36209;}.dark .ct-157101{color:#FFAB70;}"},{"id":"content:1.api:2.composables.md","path":"/api/composables","dir":"api","title":"Composables","description":"Discover the Docus composables to use in your custom Vue components and pages.","keywords":["useDocus()","useMenu()","useScrollspy()"],"body":"  Composables  Discover the Docus composables to use in your custom Vue components and pages.   useDocus()   useDocus()  gives access to docus runtime config, all default values and your custom config from   app.config.ts    config  refers to the merged config of the current page.   main ,   header ,   aside ,   footer  and   titleTemplate  can be set from   _dir.yml  and any   page.md  file.  The configs in   app.config  file will be used as defaults.     <  script     setup  >\n   const   {   config   }   =     useDocus  ()\n   </  script  >\n     <  template  >\n     <  div  >\n       <  h1  >{{ config.title }}</  h1  >\n       <  p  >{{ config.description }}</  p  >\n     </  div  >\n   </  template  >    tree  refers to the current navigation tree that is displayed in the   aside  component.     <  script     setup  >\n   const   {   tree   }   =     useDocus  ()\n   </  script  >\n     <  template  >\n     <  DocsAsideTree     :links  =  \"tree\"   />\n   </  template  >    useMenu()   useMenu()  gives access to   $menu  plugin controlling mobile navigation globally.     const   {\n       // Is menu visible\n       visible  ,\n       // Close menu function\n       close  ,\n       // Open menu function\n       open  ,\n       // Toggle menu function\n       toggle\n   }   =     useMenu  ()    useScrollspy()   useScrollspy()  is used in   docs  layout to make the ToC display the currently visible headings.     const   {\n       // Headings on the page\n       visibleHeadings  ,\n       // Active headings (for the current page)\n       activeHeadings  ,\n       // Update headings (an array of DOM nodes)\n       updateHeadings\n   }   =     useScrollspy  ()   .github-light_github-dark{color:#24292e;background:#fff;}.dark .github-light_github-dark{color:#e1e4e8;background:#24292e;}.ct-553616{color:#24292E;}.dark .ct-553616{color:#E1E4E8;}.ct-914029{color:#22863A;}.dark .ct-914029{color:#85E89D;}.ct-762058{color:#6F42C1;}.dark .ct-762058{color:#B392F0;}.ct-149352{color:#D73A49;}.dark .ct-149352{color:#F97583;}.ct-617022{color:#005CC5;}.dark .ct-617022{color:#79B8FF;}.ct-028869{color:#B31D28;font-style:italic;}.dark .ct-028869{color:#FDAEB7;font-style:italic;}.ct-952708{color:#032F62;}.dark .ct-952708{color:#9ECBFF;}.ct-086898{color:#6A737D;}"},{"id":"content:1.api:3.layouts.md","path":"/api/layouts","dir":"api","title":"Layouts","description":"Docus provides multiple built-in layouts for displaying your Markdown pages.","keywords":["default","page"],"body":"  Layouts  Docus provides multiple built-in layouts for displaying your Markdown pages.   default  The default layout for every page created in the project. This layout renders multiple section alongside the content:   Aside navigation menu (togglable with   aside: false/true )  Page bottom section (togglable with   bottom: false/true )  Table of content (togglable with   toc: false/true )     ---\n   aside  :   true\n   bottom  :   true\n   toc  :   false\n   ---\n     Your awesome content  Current page is live sample of default layout.   page   page  layout is content focused layout. This layout does not render aside menu of table of contents.  This layout accept some configuration from content front-matter.    fluid : By setting   fluid: true  in content front-matter the content will be rendered in full width.   constrainedClass : Using this option you can modify layout container look. Like constraining layout width of changing the background.   padded : Setting   padded: true  in front-matter will add horizontal padding in the layout.     ---\n   title  :   Home\n   layout  :   page\n   fluid  :   true\n   ---  Check   Home page  as live sample of page layout  .github-light_github-dark{color:#24292e;background:#fff;}.dark .github-light_github-dark{color:#e1e4e8;background:#24292e;}.ct-553616{color:#24292E;}.dark .ct-553616{color:#E1E4E8;}.ct-914029{color:#22863A;}.dark .ct-914029{color:#85E89D;}.ct-617022{color:#005CC5;}.dark .ct-617022{color:#79B8FF;}.ct-952708{color:#032F62;}.dark .ct-952708{color:#9ECBFF;}"},{"id":"content:2.desktop:1.WindowsForm找不到類型xxxx上的建構涵式.md","path":"/desktop/windowsformxxxx","dir":"desktop","title":"WindowsForm找不到類型xxxx上的建構涵式","description":"","keywords":["情境","錯誤訊息","解決方法"],"body":"  WindowsForm找不到類型xxxx上的建構涵式  情境  近期在設計DeskTop頁面時有遇到幾個頁面基底邏輯相同的狀況，於是特別設置Base Page去讓UC繼承使用。因為頁面其實長差不多，所以最後決定不使用參考引用而直接使用繼承。  讓A(UC_3Dswitch_CalibrationFileManagement)繼承B(UC_3Dswitch_FileManagementBase)。  錯誤訊息  編譯上都沒有問題，但此時再使用Design模式時，發生找不到類型錯誤如下    解決方法    宣告無注入空的建構子，       // 宣告無注入空的建構子\n   public     UC_3Dswitch_FileManagementBase  ()\n   {\n     }\n   public     UC_3Dswitch_FileManagementBase  (  AppSetting     appSetting  ) \n   {\n       ProductLineDataPath   =   appSetting.ProductLineDataPath;\n       SNFolderNameLength   =   appSetting.SNFolderNameLength;\n         InitializeComponent  ();\n   }  因原先Base設定注入所宣告AppSetting物件，故發生上述無法載入錯誤。看起來Deisnger模式在Control物件使用上Defaul都是預設空的建構子設置。  .github-light_github-dark{color:#24292e;background:#fff;}.dark .github-light_github-dark{color:#e1e4e8;background:#24292e;}.ct-086898{color:#6A737D;}.ct-149352{color:#D73A49;}.dark .ct-149352{color:#F97583;}.ct-553616{color:#24292E;}.dark .ct-553616{color:#E1E4E8;}.ct-762058{color:#6F42C1;}.dark .ct-762058{color:#B392F0;}"},{"id":"content:3.database:1.MSSQL使用指令測試Server硬碟速度小技巧.md","path":"/database/mssqlserver","dir":"database","title":"MSSQL使用指令測試Server硬碟速度小技巧","description":"","keywords":["讀取速度","寫入速度"],"body":"  MSSQL使用指令測試Server硬碟速度小技巧  讀取速度  選抽一個資料庫 下BACKUP DATABASE指令，備分資料庫不做寫入，只做讀取，可得到讀取速度值。     BACKUP     DATABASE   [FUXIN_CPL]   TO     DISK     =  'NULL'     WITH     COPY_ONLY    下圖可看到結果每秒讀取速度為180MB/sec    寫入速度     BACKUP     DATABASE   [FUXIN_CPL]   TO     DISK     =  'C:\\TEST.BAK'     WITH     COPY_ONLY  此時會得到讀寫時間為每秒153MB    每秒153MB為讀寫時間，此時須作運算處裡將寫入時間算出  讀取總頁數共688頁，一頁8k => 688*8.0 / 1024 = 5.375M  寫入時間為 0.035-0.03 = 0.005  5.375M/0.005 = 1075M  .github-light_github-dark{color:#24292e;background:#fff;}.dark .github-light_github-dark{color:#e1e4e8;background:#24292e;}.ct-149352{color:#D73A49;}.dark .ct-149352{color:#F97583;}.ct-553616{color:#24292E;}.dark .ct-553616{color:#E1E4E8;}.ct-952708{color:#032F62;}.dark .ct-952708{color:#9ECBFF;}"},{"id":"content:4.keycloak:1.身份驗證與授權與Keycloak.md","path":"/keycloak/keycloak","dir":"keycloak","title":"身份驗證與授權與Keycloak","description":"","keywords":["一、關於身份驗證與授權"],"body":"  身份驗證與授權與Keycloak  一、關於身份驗證與授權  身份驗證和授權是系統安全性非常重要的環節。身份驗證用於識別使用者是誰，而授權則賦予使用者某些特定權限。更具體來說，這整個過程可以分為四個部分：   身分識別 (Identification)：這是一個讓系統知道你是誰的過程。例如，當你使用用戶名或電子郵件地址登入系統時，就是進行身分識別。  身分驗證 (Authentication)：這個過程讓系統確認你確實是你聲稱的那個人。通常是通過輸入密碼、使用FaceID或OTP來完成的。  授權 (Authorization)：這涉及到角色分配。根據你的角色，系統會賦予你不同的權限。例如，一個“編輯者”角色可能有編輯內容的權限，而一個“閱讀者”角色則只能閱讀。  存取控制 (Access Control)：這涉及到具體的操作權限。比如，在一個IT管理系統中，一個普通使用者可能可以重啟伺服器和查看系統日誌，但不能部署新的程式碼。然而，一個開發者則可能有這樣的權限。  在你登入系統，輸入帳號密碼為身分識別與身分驗證，系統驗證完後，會根據身分授予角色。至於此角色權限則可以在後台系統上設置。至於這部分的詳細實做概念牽扯還是蠻多的...會再找時間針對這部分做一個細部講解。  1. 身分識別驗證與授權簡易實作  了解這些基礎概念後，我們可以考慮如何手動實現這四個部分。   身分識別 (Identification) : 最常見的實現方式是透過一個使用者註冊頁面，讓使用者輸入基本資料，例如用戶名和密碼。這些信息會被存儲在後端的資料庫中（密碼會被加密）。  身分驗證 (Authentication) : 驗證的方法有多種。   密碼驗證 : 簡單地說，就是將輸入的密碼與資料庫中存儲的密碼進行比對。  多因素驗證 : 二次驗證，例如OTP、FaceID，或是手機&Mail驗證  Session/Token管理 : 用戶登入後，系統會生成一個session或token並發送給用戶。後續的所有請求都需要這個token以確認身份。  授權 (Authorization) : 這部分簡易實作基本上會有三部份   角色管理：在資料庫中設計一個角色和權限的模型。例如，每個使用者可以有一個或多個角色，每個角色有不同的權限。  權限檢查：每次使用者請求某個資源或操作時，檢查他們的角色是否有相應的權限。  API設計：設計API時，確保每個API端點都有適當的授權檢查。  存取控制 (Access Control)   基於角色的存取控制 (RBAC)：根據使用者的角色決定他們可以訪問的資源。  細緻的權限設定：允許系統管理者為每個角色定制細緻的權限，例如某角色只能讀取資料但不能編輯。  其他考慮   日誌和監控：記錄所有的登錄嘗試、授權請求等，以便日後分析和審計。  資料庫安全性：確保資料庫有適當的加密和備份策略。  定期檢查和更新：隨著時間的推移，可能會出現新的安全威脅。定期檢查和更新你的身份驗證和授權策略，以確保它們始終是安全的。  2. 身分識別驗證、授權與Keycloak  通過使用Keycloak，我們能夠更為高效地實現身分識別、身分驗證、授權，以及存取控制等功能。   身分識別 (Identification)   不僅提供使用者註冊功能，讓使用者可以用基本資訊，比如用戶名或電子郵件進行註冊，還支持多種社交登入方式，如Google或Facebook。  身分驗證 (Authentication   支援多種身分驗證方法，包括密碼、OTP、FaceID等，也提供Token管理，當使用者成功登入後，Keycloak 會發放一個 token，使用者可以使用此 token 來存取其他受保護的資源。  授權 (Authorization)   可以定義多個角色，並為每個角色分配不同的權限，使用者可以被分配到一個或多個角色，這些角色決定了使用者可以訪問哪些資源。  存取控制 (Access Control)   支援基於角色的存取控制 (RBAC)。你可以設定哪些角色可以訪問哪些資源。  一般來說，要全面實施這四大功能通常需要大量的時間和資源。開發者不只需要寫大量的程式碼，還必須維護系統的安全性、效能，並確保與其他系統的良好整合。有了Keycloak，這一切都變得相對簡單。"},{"id":"content:4.keycloak:2.OIDC與SAML.md","path":"/keycloak/oidcsaml","dir":"keycloak","title":"OIDC vs SAML","description":"在這部分，我們將探討OIDC和SAML。正如前一章節所提，身分驗證和授權是整個安全流程中非常關鍵的環節。一般來說，會有專門的解決方案來處理這些問題。OIDC和SAML都是為這個目的而設計的標準協議，它們提供一個集中式的方法來驗證使用者身份，並界定他們可以訪問哪些資源或執行哪些操作。","keywords":["1. Open ID Connect (OIDC)："],"body":"  OIDC vs SAML  在這部分，我們將探討OIDC和SAML。正如前一章節所提，身分驗證和授權是整個安全流程中非常關鍵的環節。一般來說，會有專門的解決方案來處理這些問題。OIDC和SAML都是為這個目的而設計的標準協議，它們提供一個集中式的方法來驗證使用者身份，並界定他們可以訪問哪些資源或執行哪些操作。  1. Open ID Connect (OIDC)：  OIDC是一個建立在OAuth 2.0之上的身分認證層。OAuth 2.0本身是一個專注於授權的框架，而OIDC則在這個基礎上增加了身分驗證功能。這樣，應用程式不僅能知道使用者有哪些權限，還能瞭解使用者是誰，並獲取他們的基本資訊，比如名稱和電子郵件地址。  a. OAuth 2.0  OAuth 2.0 是一個授權框架，允許第三方應用程式在使用者同意的情況下存取使用者在某個服務上的資訊，而不需要分享使用者的密碼。通常在OAuth 2.0，會有幾個角色，我們這邊舉一個簡單情境，你希望使用「快速日記」App，而這個App提供使用Google帳戶登入的功能來使用Google雲端硬碟服務。   Resource Owner(資源擁有者) : 通常就是User(你)， 能授予應用程式取得受保護資料的人，通常就是終端使用者（end-user）。例如你希望使用「快速日記」App，而這個App提供使用Google帳戶登入的功能。在OAuth的流程中，當App請求許可存取你的資料時，你會給予（或拒絕）這個請求。  Resource Server(Resource Server) : 存放使用者受保護資料的伺服器，以這個例子來說就是Google雲端硬碟，當「快速日記」App希望保存或讀取日記時，它會向此伺服器提出請求。  Client (客戶端)：通常指稱想要取得受保護資源的「應用程式」，以這個例子來說就是「快速日記」App。 當「快速日記」App希望保存或讀取日記時，它會向此伺服器提出請求。  Authorization Server (授權伺服器) : 驗證 Resource Owner 的身份，並且在獲得同意之後，發放「Access Token」給應用程式（Client）的伺服器。以這個例子來說就是 (Google的授權伺服器)。  下圖整個驗證Flow  \n   驗證Flow     Client 到 Resource Owner :   Request Credentials : 當你打開「快速日記」App並選擇使用Google帳戶登入時，App首先會引導你到Google的登入頁面。  Authenticate : 你將在Google的頁面上輸入你的Google帳戶憑證，即用戶名和密碼。這一步是由Google完成的，而「快速日記」App不會看到或知道你的密碼。  Consent : 一旦驗證成功，Google會顯示一個請求同意頁面。在這裡，Google會詢問你是否允許「快速日記」App訪問特定的Google帳戶資料。  Credentials : 「Resource Owner」（使用者）提供的身份資訊或某種用於辨識其身份的資料。這只是一個授權請求，而實際的身份驗證會在Resource Owner和Authorization Server之間完成。    Client 到 Authorization Server   Authorization Request : 如果你同意上述的權限請求，「快速日記」App會從Google的授權伺服器請求一個授權碼。  Authorization Code : Google的授權伺服器會回傳一個短暫的授權碼給「快速日記」App。  Access Token : ，「快速日記」App會使用這個授權碼再次向Google的授權伺服器請求取得訪問令牌（Access Token）。    Client 到 Resource Server   Access Token: 一旦取得訪問令牌，「快速日記」App便可以使用此令牌來存取Google雲端硬碟（或其他你同意的資料）。  Protected Resource: 當「快速日記」App希望保存或讀取日記時，它會使用這個Access Token向Google雲端硬碟（作為資源伺服器）提出請求，然後Google雲端硬碟會根據該令牌提供相對應的資料或服務。  更詳細的其實還有關係到Redirect部分，可以參照這篇   https://cloudsundial.com/salesforce-oauth-flows  寫得還算詳細。  "}]