[{"_path":"/code/fp(functional-programming)-(currying-closure-)","_dir":"code","_draft":false,"_partial":false,"_locale":"","title":"A Simplified Clarification of Functional Programming (Including Currying and Closure)","description":"","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"a-simplified-clarification-of-functional-programming-including-currying-and-closure"},"children":[{"type":"text","value":"A Simplified Clarification of Functional Programming (Including Currying and Closure)"}]},{"type":"element","tag":"h6","props":{"id":"tags-code-sense-design-pattern"},"children":[{"type":"text","value":"tags: "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Code Sense"}]},{"type":"text","value":" "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Design-Pattern"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I was recently watching a YouTube video on "},{"type":"element","tag":"a","props":{"href":"https://www.youtube.com/watch?v=5lY7caTLyXA&lc=Ugwm-V71T7Ah3fVPSt14AaABAg&ab_channel=%E8%B5%B0%E6%AD%AA%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%B8%ABJames","rel":["nofollow"]},"children":[{"type":"text","value":"Currying"}]},{"type":"text","value":" when a comment piqued my interest in the role of closures in functional programming. As an OOP developer who hasn't done much FP in years, I decided to revisit these concepts. This post is a personal reflection on my understanding of Currying and closures, and an attempt to clarify the differences between OOP and FP, especially from the perspective of someone who has been primarily focused on object-oriented programming."}]},{"type":"element","tag":"h2","props":{"id":"differences-between-oop-and-fp-in-pure-data-processing-scenarios"},"children":[{"type":"text","value":"Differences between OOP and FP in Pure Data Processing Scenarios"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"OOP excels in designing real-world architectures using objects and design patterns. However, FP seems to be more prevalent in data processing applications, often presented in the form of APIs. This is my initial understanding, and I aim to delve deeper into this topic through further research."}]},{"type":"element","tag":"h3","props":{"id":"mathematical-and-scientific-computing"},"children":[{"type":"text","value":"Mathematical and Scientific Computing"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"A brief exploration of the literature reveals that FP draws its concepts and philosophy from a mathematical logic system known as lambda calculus. In lambda calculus, everything is a function, and the only operation is application. This simple and unified framework aligns closely with the mathematical concept of functions, aiding in the construction of concise, predictable, and easily reasoned programs."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Purity: In mathematics, the value of a function depends solely on its inputs, independent of any external state. This aligns with the concept of functions in lambda calculus and forms the foundation of \"pure functions\" in functional programming."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"First-class functions: In mathematics, functions can be passed as inputs to other functions and can also be returned as outputs from other functions. This aligns with the concept of functions in lambda calculus and is the basis for the \"functions as first-class citizens\" concept in functional programming."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Therefore, it can be said that FP was deeply influenced by mathematics from its inception. However, this does not mean that functional programming is only suitable for mathematical problems. In fact, functional programming concepts such as immutability, "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"pure functions"}]},{"type":"text","value":", and "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"function composition"}]},{"type":"text","value":" are useful in many different application contexts and domains."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Those who are more familiar with OOP might feel that these characteristics can also be implemented conceptually in OOP. However, in scenarios where data needs to be processed in large-scale parallel and asynchronous operations, FP's immutability and statelessness can offer significant advantages."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Another simpler example to illustrate the difference in data applications is as follows. Suppose we have a task to square each element in a dataset (e.g., a list of numbers). In an object-oriented implementation, we might create a DataSet class and provide a method for this class to perform the squaring operation:"}]},{"type":"element","tag":"pre","props":{"className":"language-python github-light_github-dark","code":"class DataSet:\n    def __init__(self, data):\n        self.data = data\n\n    def square(self):\n        for i in range(len(self.data)):\n            self.data[i] = self.data[i] ** 2\n","language":"python","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"class"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-762058"},"children":[{"type":"text","value":"DataSet"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":":\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":2},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"def"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"__init__"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"(self, data):\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":3},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"        "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"self"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":".data "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" data\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":4},"children":[{"type":"element","tag":"span","props":{},"children":[]}]},{"type":"element","tag":"span","props":{"class":"line","line":5},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"def"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-762058"},"children":[{"type":"text","value":"square"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"(self):\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":6},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"        "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"for"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" i "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"in"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"range"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"len"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"self"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":".data)):\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":7},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"            "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"self"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":".data[i] "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"self"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":".data[i] "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"**"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"2"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The context is as follows:"}]},{"type":"element","tag":"pre","props":{"className":"language-python github-light_github-dark","code":"data = DataSet([1, 2, 3, 4, 5])\ndata.square()\nprint(data.data)  # Outputs: [1, 4, 9, 16, 25]\n","language":"python","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"data "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" DataSet(["}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"1"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":", "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"2"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":", "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"3"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":", "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"4"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":", "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"5"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"])\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":2},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"data.square()\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":3},"children":[{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"print"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"(data.data)  "}]},{"type":"element","tag":"span","props":{"class":"ct-086898"},"children":[{"type":"text","value":"# Outputs: [1, 4, 9, 16, 25]"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The problem with this implementation is that whenever we need to perform a new operation on the data (such as taking the square root, logarithm, etc.), we need to add a new method to the DataSet class. If there are many types of operations, the DataSet class will become very bloated."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In FP design, we abstract these operations into functions, and these functions can be easily applied to each element in the dataset as follows:"}]},{"type":"element","tag":"pre","props":{"className":"language-python github-light_github-dark","code":"def square(x):\n    return x ** 2\n\ndata = [1, 2, 3, 4, 5]\ndata = list(map(square, data))\n\nprint(data)  # Outputs: [1, 4, 9, 16, 25]\n","language":"python","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"def"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-762058"},"children":[{"type":"text","value":"square"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"(x):\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":2},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"return"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" x "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"**"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"2\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":3},"children":[{"type":"element","tag":"span","props":{},"children":[]}]},{"type":"element","tag":"span","props":{"class":"line","line":4},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"data "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" ["}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"1"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":", "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"2"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":", "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"3"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":", "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"4"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":", "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"5"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"]\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":5},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"data "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"list"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"map"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"(square, data))\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":6},"children":[{"type":"element","tag":"span","props":{},"children":[]}]},{"type":"element","tag":"span","props":{"class":"line","line":7},"children":[{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"print"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"(data)  "}]},{"type":"element","tag":"span","props":{"class":"ct-086898"},"children":[{"type":"text","value":"# Outputs: [1, 4, 9, 16, 25]"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In this scenario, when we need to add a new operation, we simply add a new function without modifying the data structure. Moreover, these functions can be reused for any type of dataset, not just our defined DataSet class. Therefore, for situations that require the same operations on a large amount of data, the functional programming style often provides greater flexibility and reusability."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You might think this example is a bit contrived and wonder why anyone would design objects for this application. You're absolutely right! FP tends to express computation as the evaluation of mathematical functions, focusing more on data manipulation and transformation rather than encapsulating data and behavior into objects as in object-oriented programming and describing the computational process using object interactions."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This doesn't mean that FP is unsuitable for scenarios that require object design, but rather that they have different approaches to solving problems. In fact, in many modern languages, FP and OOP are both considered important parts of the language and can be used together in many scenarios."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In the aforementioned example, if these data were encapsulated in objects in a more complex system and the objects had their own behaviors and states, then using OOP might be more appropriate. However, when we need to process large amounts of data and perform various transformations and manipulations on this data, the higher-order functions like map, reduce, and filter provided by FP allow us to describe these operations more directly."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"With this explanation, you should have a clearer understanding of the differences between FP and OOP in the context of mathematical and scientific computing applications."}]},{"type":"element","tag":"h3","props":{"id":"big-data-processing-and-analytics"},"children":[{"type":"text","value":"Big data processing and analytics"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The combination of functional programming (FP) and immutable data structures is highly effective in big data processing and analysis applications. For example, Apache Spark is an open-source cluster computing system for big data processing written in Scala, a language that supports FP, and leverages many FP concepts such as immutable datasets and higher-order functions."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Let's delve deeper into Apache Spark and the application of functional programming in big data processing."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Apache Spark is an open-source cluster computing system for large-scale data processing. It provides a high-level API for data manipulation called Resilient Distributed Dataset (RDD). An RDD is an immutable, distributed collection of elements of the same type."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In Spark, RDDs are the primary data structure, and all operations (such as map, filter, reduce) are performed on RDDs. Since RDDs are immutable, once created, they cannot be modified, allowing Spark to effectively track data lineage and changes in large-scale parallel computations."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Here's a simple example of a map-reduce operation using Spark's Python API (PySpark):"}]},{"type":"element","tag":"pre","props":{"className":"language-python github-light_github-dark","code":"from pyspark import SparkContext\n\nsc = SparkContext(\"local\", \"count app\")\nnums = sc.parallelize([1, 2, 3, 4, 5])\n\n# Add one to each number\nadd_one = nums.map(lambda x: x + 1)\n\n#  Calculate the sum of all numbers\nsum = add_one.reduce(lambda a, b: a + b)\n\nprint(sum)  # Output: 20\n\n","language":"python","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"from"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" pyspark "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"import"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" SparkContext\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":2},"children":[{"type":"element","tag":"span","props":{},"children":[]}]},{"type":"element","tag":"span","props":{"class":"line","line":3},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"sc "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" SparkContext("}]},{"type":"element","tag":"span","props":{"class":"ct-952708"},"children":[{"type":"text","value":"\"local\""}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":", "}]},{"type":"element","tag":"span","props":{"class":"ct-952708"},"children":[{"type":"text","value":"\"count app\""}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":")\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":4},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"nums "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" sc.parallelize(["}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"1"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":", "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"2"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":", "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"3"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":", "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"4"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":", "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"5"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"])\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":5},"children":[{"type":"element","tag":"span","props":{},"children":[]}]},{"type":"element","tag":"span","props":{"class":"line","line":6},"children":[{"type":"element","tag":"span","props":{"class":"ct-086898"},"children":[{"type":"text","value":"# Add one to each number\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":7},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"add_one "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" nums.map("}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"lambda"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" x: x "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"+"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"1"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":")\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":8},"children":[{"type":"element","tag":"span","props":{},"children":[]}]},{"type":"element","tag":"span","props":{"class":"line","line":9},"children":[{"type":"element","tag":"span","props":{"class":"ct-086898"},"children":[{"type":"text","value":"#  Calculate the sum of all numbers\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":10},"children":[{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"sum"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" add_one.reduce("}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"lambda"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" a, b: a "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"+"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" b)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":11},"children":[{"type":"element","tag":"span","props":{},"children":[]}]},{"type":"element","tag":"span","props":{"class":"line","line":12},"children":[{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"print"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"sum"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":")  "}]},{"type":"element","tag":"span","props":{"class":"ct-086898"},"children":[{"type":"text","value":"# Output: 20"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In this example, we first create an RDD (nums) and then use the map operation to increment each number in the RDD by one. Following that, we use the reduce operation to sum all the numbers. These operations are performed in the form of functions (lambda functions) and can be executed in parallel across multiple nodes automatically."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This is a practical application of functional programming in big data processing. By utilizing immutable data structures (RDDs) and higher-order functions (map, reduce, etc.), Spark enables the abstraction of large-scale data processing problems and provides an efficient, concise, and scalable solution."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If this example is too complex, let's consider a simpler one to understand the advantages of functional programming in big data processing. Suppose we have a dataset containing millions of records, each representing a person's personal information (e.g., name, age, address). Our task is to find all individuals who are over 18 years old."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In an object-oriented approach, we might handle this as follows:"}]},{"type":"element","tag":"pre","props":{"className":"language-python github-light_github-dark","code":"\nclass Person:\n    def __init__(self, name, age, address):\n        self.name = name\n        self.age = age\n        self.address = address\n\npeople = [...]  # Assuming this is a huge list containing millions of Person objects.\n\nadults = []\nfor person in people:\n    if person.age >= 18:\n        adults.append(person)\n\n","language":"python","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{},"children":[]}]},{"type":"element","tag":"span","props":{"class":"line","line":2},"children":[{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"class"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-762058"},"children":[{"type":"text","value":"Person"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":":\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":3},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"def"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"__init__"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"(self, name, age, address):\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":4},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"        "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"self"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":".name "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" name\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":5},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"        "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"self"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":".age "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" age\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":6},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"        "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"self"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":".address "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" address\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":7},"children":[{"type":"element","tag":"span","props":{},"children":[]}]},{"type":"element","tag":"span","props":{"class":"line","line":8},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"people "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" ["}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"..."}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"]  "}]},{"type":"element","tag":"span","props":{"class":"ct-086898"},"children":[{"type":"text","value":"# Assuming this is a huge list containing millions of Person objects.\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":9},"children":[{"type":"element","tag":"span","props":{},"children":[]}]},{"type":"element","tag":"span","props":{"class":"line","line":10},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"adults "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" []\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":11},"children":[{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"for"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" person "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"in"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" people:\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":12},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"if"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" person.age "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":">="}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"18"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":":\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":13},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"        adults.append(person)"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In functional programming, this task can be abstracted as a filtering operation."}]},{"type":"element","tag":"pre","props":{"className":"language-python github-light_github-dark","code":"# Assume this is a list containing millions of tuples, where each tuple represents a person's information.\npeople = [...]   \n\nadults = filter(lambda person: person[1] >= 18, people)\n\n","language":"python","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{"class":"ct-086898"},"children":[{"type":"text","value":"# Assume this is a list containing millions of tuples, where each tuple represents a person's information.\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":2},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"people "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" ["}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"..."}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"]   \n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":3},"children":[{"type":"element","tag":"span","props":{},"children":[]}]},{"type":"element","tag":"span","props":{"class":"line","line":4},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"adults "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"filter"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"lambda"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" person: person["}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"1"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"] "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":">="}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"18"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":", people)"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In this example, the built-in filter function and a lambda function are used to achieve the goal. This approach is more concise and intuitive, and it can automatically leverage parallel processing for faster computation (e.g., when using a distributed computing framework like PySpark)."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Speaking of which, when we look back at the example, FP designs are characterized by immutability and pure functions (where the output depends solely on the input). Therefore, they are particularly well-suited for data processing applications. However, the real world is not entirely pure. Operations like fetching data from a database and displaying it on the frontend involve many changes to state (different from data state). In these cases, OOP would be a better choice."}]},{"type":"element","tag":"h2","props":{"id":"closures-and-currying-in-functional-programming"},"children":[{"type":"text","value":"Closures and Currying in Functional Programming"}]},{"type":"element","tag":"h3","props":{"id":"closures-capturing-state-in-functions"},"children":[{"type":"text","value":"Closures: Capturing State in Functions"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"While functional programming emphasizes immutability, some data manipulation processes still require the use of state. In such cases, closures provide a more concise and advanced way to achieve this. A closure is a special type of function that can access and manipulate variables that are outside its own scope, even when the function is called from outside its defining scope. This is especially useful when creating functions that need to remember a specific state. In Python, closures allow a function to \"remember\" the environment in which it was defined. For example:"}]},{"type":"element","tag":"pre","props":{"className":"language-python github-light_github-dark","code":"def make_multiplier(x):\n    def multiplier(n):\n        return x * n\n    return multiplier\n\ntimes3 = make_multiplier(3)\nprint(times3(10))  # Outputs: 30\n\n","language":"python","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"def"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-762058"},"children":[{"type":"text","value":"make_multiplier"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"(x):\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":2},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"def"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-762058"},"children":[{"type":"text","value":"multiplier"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"(n):\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":3},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"        "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"return"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" x "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"*"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" n\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":4},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"return"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" multiplier\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":5},"children":[{"type":"element","tag":"span","props":{},"children":[]}]},{"type":"element","tag":"span","props":{"class":"line","line":6},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"times3 "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" make_multiplier("}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"3"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":")\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":7},"children":[{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"print"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"(times3("}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"10"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"))  "}]},{"type":"element","tag":"span","props":{"class":"ct-086898"},"children":[{"type":"text","value":"# Outputs: 30"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The multiplier(n) function in this example is a closure. Why is that? Because it \"remembers\" the environment where it was created. When we call make_multiplier(3), we're essentially creating a new multiplier(n) function. This function \"knows\" that x is 3 (and this state doesn't change), even though multiplier(n) is defined inside make_multiplier(x). When it's returned and assigned to the times3 variable, it's actually left the \"scope\" or \"environment\" of make_multiplier(x). In other words, the multiplier(n) function is being called outside of the make_multiplier(x) function."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To further emphasize this point, the multiplier(n) function is indeed being called outside of the make_multiplier(x) function."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In Python, when you define a function, that function has its own scope, meaning it can only directly access variables defined within itself. In the make_multiplier(x) function, the function can access the variable x because x is passed in as an argument."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Then, inside the make_multiplier(x) function, a new function multiplier(n) is defined. This new function can access n because n is passed in as an argument, but it can also access x, even though x is defined in the outer make_multiplier(x) function. This is because multiplier(n) is created within the scope of make_multiplier(x), so it has access to the scope of make_multiplier(x)."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The multiplier(n) function is then returned as the return value of the make_multiplier(x) function. So when you call make_multiplier(3), you actually get a new function. When this new function is called, it will multiply the input value by 3."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When you assign the return value of make_multiplier(3) (which is the multiplier(n) function) to times3 and call times3(10), even though the multiplier(n) function is now being called outside of the make_multiplier(x) function, it still \"remembers\" the value of x (which is 3 in this case). When you call times3(10) (which is actually calling multiplier(10)), it knows to multiply 10 by 3 because it \"remembers\" that the value of x is 3."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"This is what we call a closure: a function that remembers and can access variables from its outer scope (the x in our example), even when it's called outside the scope where it was created."}]},{"type":"text","value":" In other words, multiplier(n) remembers the environment it was created in, and it still has the ability to remember and access variables from its outer function (make_multiplier(x))."}]},{"type":"element","tag":"h3","props":{"id":"grasping-the-concept-of-currying"},"children":[{"type":"text","value":"Grasping the concept of Currying"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Functional programming often involves composing functions, which can lead to more concise and readable code. Currying is a technique that transforms a function that takes multiple arguments into a sequence of functions that each take a single argument. For example, a function f(x, y) that takes two arguments can be curried into a function g(x) that takes one argument and returns another function. In this case, you can provide the first argument first (e.g., g(2)) and get a new function that takes the second argument and returns the final result (e.g., g(2)(3) returns the same result as f(2, 3)). Simply put, currying is a technique for transforming a multi-argument function into a sequence of single-argument functions.  "}]},{"type":"element","tag":"pre","props":{"className":"language-python github-light_github-dark","code":"def multiply(x):\n    def multiply_x(y):\n        return x * y\n    return multiply_x\n\ndouble = multiply(2)\nprint(double(5))  # Outputs: 10\n","language":"python","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"def"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-762058"},"children":[{"type":"text","value":"multiply"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"(x):\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":2},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"def"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-762058"},"children":[{"type":"text","value":"multiply_x"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"(y):\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":3},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"        "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"return"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" x "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"*"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" y\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":4},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"return"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" multiply_x\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":5},"children":[{"type":"element","tag":"span","props":{},"children":[]}]},{"type":"element","tag":"span","props":{"class":"line","line":6},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"double "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" multiply("}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"2"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":")\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":7},"children":[{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"print"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"(double("}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"5"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"))  "}]},{"type":"element","tag":"span","props":{"class":"ct-086898"},"children":[{"type":"text","value":"# Outputs: 10"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Transforming a function multiply that takes two arguments into a function multiply_x that takes one argument and returns another function, which also takes one argument. We can observe that multiply_x is also a closure because it remembers the value of x. Although this example appears similar to a closure, there are still some differences in their applications... let's continue!"}]},{"type":"element","tag":"h3","props":{"id":"distinctions-in-application-scenarios-between-currying-and-closure"},"children":[{"type":"text","value":"Distinctions in application scenarios between Currying and Closure"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Let's summarize:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Closure: The primary purpose of a closure is to \"remember\" variables from its outer function. Even when the inner function is returned and used elsewhere, it can still access and manipulate those variables, even if the original outer function has finished executing. This can be used to create stateful functions, meaning their behavior is influenced by their \"environment\". In the aforementioned example, multiplier(n) is a closure."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Currying: The main purpose of currying is to transform a function that takes multiple arguments into a sequence of functions that each take a single argument. This allows for more flexible use of functions, especially when functions are passed as arguments. In your second example, multiply(x) has been curried."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Imagine we're developing a game and want to count the player's score. We can use closures to implement this:"}]},{"type":"element","tag":"pre","props":{"className":"language-python github-light_github-dark","code":"def create_score_counter():\n    score = 0\n    def add_score(points):\n        nonlocal score\n        score += points\n        return score\n    return add_score\n\ncounter = create_score_counter()\nprint(counter(10))  # Outputs: 10\nprint(counter(20))  # Outputs: 30\n","language":"python","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"def"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-762058"},"children":[{"type":"text","value":"create_score_counter"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"():\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":2},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"    score "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"0\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":3},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"def"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-762058"},"children":[{"type":"text","value":"add_score"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"(points):\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":4},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"        "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"nonlocal"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" score\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":5},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"        score "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"+="}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" points\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":6},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"        "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"return"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" score\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":7},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"return"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" add_score\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":8},"children":[{"type":"element","tag":"span","props":{},"children":[]}]},{"type":"element","tag":"span","props":{"class":"line","line":9},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"counter "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" create_score_counter()\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":10},"children":[{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"print"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"(counter("}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"10"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"))  "}]},{"type":"element","tag":"span","props":{"class":"ct-086898"},"children":[{"type":"text","value":"# Outputs: 10\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":11},"children":[{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"print"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"(counter("}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"20"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"))  "}]},{"type":"element","tag":"span","props":{"class":"ct-086898"},"children":[{"type":"text","value":"# Outputs: 30"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The create_score_counter function returns an add_score function, which is a closure that remembers and modifies the score variable in its outer environment. Even after the create_score_counter function has finished executing, the add_score function can still access and modify the score variable."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In this example, a closure is a more intuitive and simpler approach to achieve the requirement. We need to record and update a \"state\" (score), and this state needs to be preserved across consecutive function calls. Closures allow us to bundle the state (score in this case) with the function that operates on the state (add_score), and this state will be \"remembered\" across subsequent function calls."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"(Currying) is primarily used to transform a function that takes multiple arguments into a sequence of functions that each take a single argument. It is useful when we need to \"fix\" some of the arguments (or default parameters) of a function, and the remaining arguments are provided later. However, in this example, our primary need is to \"record and update state\", not just to \"fix some arguments\".  "}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In another scenario, suppose we are processing a list, and we want to apply a function to each element in the list. We can use currying to create a function that takes a function and a list as arguments, and then returns a new function that takes an element and applies the function we passed in earlier:"}]},{"type":"element","tag":"pre","props":{"className":"language-python github-light_github-dark","code":"def map_function(func):\n    def apply_func_to_list(lst):\n        return [func(x) for x in lst]\n    return apply_func_to_list\n\ndouble = lambda x: x * 2\nmap_double = map_function(double)\n\nprint(map_double([1, 2, 3, 4, 5]))  # Outputs: [2, 4, 6, 8, 10]\n","language":"python","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"def"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-762058"},"children":[{"type":"text","value":"map_function"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"(func):\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":2},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"def"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-762058"},"children":[{"type":"text","value":"apply_func_to_list"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"(lst):\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":3},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"        "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"return"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" [func(x) "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"for"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" x "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"in"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" lst]\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":4},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"return"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" apply_func_to_list\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":5},"children":[{"type":"element","tag":"span","props":{},"children":[]}]},{"type":"element","tag":"span","props":{"class":"line","line":6},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"double "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"lambda"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" x: x "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"*"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"2\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":7},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"map_double "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" map_function(double)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":8},"children":[{"type":"element","tag":"span","props":{},"children":[]}]},{"type":"element","tag":"span","props":{"class":"line","line":9},"children":[{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"print"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"(map_double(["}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"1"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":", "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"2"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":", "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"3"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":", "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"4"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":", "}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"5"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"]))  "}]},{"type":"element","tag":"span","props":{"class":"ct-086898"},"children":[{"type":"text","value":"# Outputs: [2, 4, 6, 8, 10]"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The map_function is essentially performing currying: it takes a function as an argument and returns a new function, apply_func_to_list. This new function accepts a list as an argument and applies the function passed to map_function to each element in the list."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This example does not require a \"state\" that needs to be maintained and updated. The map_function in this example can be seen as a curried function: it first takes a function func and then returns a new function apply_func_to_list, which takes a list lst and applies func to each element of lst."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This characteristic of receiving function arguments in stages allows you to fix some parameters in advance (in this case, func) and generate a new function to handle subsequent parameters (in this case, lst). This feature can make code more concise and flexible in certain situations. In contrast, closures are a concise way to manage and update state."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"After reading this, you should have a clearer understanding of FP design concepts, as well as closures and currying. However, to truly grasp these concepts, you need to apply them in practical, context-specific design scenarios."}]},{"type":"element","tag":"h2","props":{"id":"notes"},"children":[{"type":"text","value":"Notes"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"currying can also be implemented in C# using delegates, as shown below:"}]},{"type":"element","tag":"pre","props":{"className":"language-csharp github-light_github-dark","code":"public static void Main()\n{\n    Func<int, Func<int, int>> curriedMultiply = MultiplyCurried();\n    Func<int, int> multiplyBy2 = curriedMultiply(2);\n\n    int result = multiplyBy2(3); // result will be 6\n    Console.WriteLine(result);\n}\n\nstatic Func<int, Func<int, int>> MultiplyCurried()\n{\n    return a => b => a * b;\n}\n","language":"csharp","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"public"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"static"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"void"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-762058"},"children":[{"type":"text","value":"Main"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"()\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":2},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"{\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":3},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"class":"ct-762058"},"children":[{"type":"text","value":"Func"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"int"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":", "}]},{"type":"element","tag":"span","props":{"class":"ct-762058"},"children":[{"type":"text","value":"Func"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"int"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":", "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"int"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":">> "}]},{"type":"element","tag":"span","props":{"class":"ct-762058"},"children":[{"type":"text","value":"curriedMultiply"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-762058"},"children":[{"type":"text","value":"MultiplyCurried"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"();\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":4},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"class":"ct-762058"},"children":[{"type":"text","value":"Func"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"int"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":", "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"int"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"> "}]},{"type":"element","tag":"span","props":{"class":"ct-762058"},"children":[{"type":"text","value":"multiplyBy2"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-762058"},"children":[{"type":"text","value":"curriedMultiply"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"2"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":");\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":5},"children":[{"type":"element","tag":"span","props":{},"children":[]}]},{"type":"element","tag":"span","props":{"class":"line","line":6},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"int"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-762058"},"children":[{"type":"text","value":"result"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-762058"},"children":[{"type":"text","value":"multiplyBy2"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-617022"},"children":[{"type":"text","value":"3"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"); "}]},{"type":"element","tag":"span","props":{"class":"ct-086898"},"children":[{"type":"text","value":"// result will be 6\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":7},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"    Console."}]},{"type":"element","tag":"span","props":{"class":"ct-762058"},"children":[{"type":"text","value":"WriteLine"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"(result);\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":8},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"}\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":9},"children":[{"type":"element","tag":"span","props":{},"children":[]}]},{"type":"element","tag":"span","props":{"class":"line","line":10},"children":[{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"static"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-762058"},"children":[{"type":"text","value":"Func"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"int"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":", "}]},{"type":"element","tag":"span","props":{"class":"ct-762058"},"children":[{"type":"text","value":"Func"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"int"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":", "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"int"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":">> "}]},{"type":"element","tag":"span","props":{"class":"ct-762058"},"children":[{"type":"text","value":"MultiplyCurried"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"()\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":11},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"{\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":12},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"return"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-762058"},"children":[{"type":"text","value":"a"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"=>"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-762058"},"children":[{"type":"text","value":"b"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"=>"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" a "}]},{"type":"element","tag":"span","props":{"class":"ct-149352"},"children":[{"type":"text","value":"*"}]},{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":" b;\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":13},"children":[{"type":"element","tag":"span","props":{"class":"ct-553616"},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Although it can be implemented, the primary design of delegates is for event handling, asynchronous calls, and callback functions, which differs from the application of closures in the data world. In the realm of data analysis and processing, the primary purpose of closures is to \"remember\" variables from outer functions and manipulate them within the closure. This is particularly useful for scenarios where internal state needs to be maintained and updated. For example, when performing statistical calculations or counting, closures can make our code more concise and easier to understand."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Delegates, on the other hand, are applied in general software design areas such as event handling, asynchronous calls, and callback functions. A delegate is essentially an object that holds a reference to a function or method. When a delegate is invoked, it can call the function or method it references. This allows for dynamic changes to function or method behavior and makes code more flexible at runtime."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I feel that I can have a more comprehensive understanding of FP. Whenever I hear people say there are two opposing beliefs, I think it's because they don't have a complete understanding of OOP and FP, or they lack sufficient experience in applying them in appropriate scenarios, which leads to a bias towards one or the other."}]},{"type":"element","tag":"style","props":{},"children":[{"type":"text","value":".github-light_github-dark{color:#24292e;background:#fff;}.dark .github-light_github-dark{color:#e1e4e8;background:#24292e;}.ct-149352{color:#D73A49;}.dark .ct-149352{color:#F97583;}.ct-553616{color:#24292E;}.dark .ct-553616{color:#E1E4E8;}.ct-762058{color:#6F42C1;}.dark .ct-762058{color:#B392F0;}.ct-617022{color:#005CC5;}.dark .ct-617022{color:#79B8FF;}.ct-086898{color:#6A737D;}.ct-952708{color:#032F62;}.dark .ct-952708{color:#9ECBFF;}"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"differences-between-oop-and-fp-in-pure-data-processing-scenarios","depth":2,"text":"Differences between OOP and FP in Pure Data Processing Scenarios","children":[{"id":"mathematical-and-scientific-computing","depth":3,"text":"Mathematical and Scientific Computing"},{"id":"big-data-processing-and-analytics","depth":3,"text":"Big data processing and analytics"}]},{"id":"closures-and-currying-in-functional-programming","depth":2,"text":"Closures and Currying in Functional Programming","children":[{"id":"closures-capturing-state-in-functions","depth":3,"text":"Closures: Capturing State in Functions"},{"id":"grasping-the-concept-of-currying","depth":3,"text":"Grasping the concept of Currying"},{"id":"distinctions-in-application-scenarios-between-currying-and-closure","depth":3,"text":"Distinctions in application scenarios between Currying and Closure"}]},{"id":"notes","depth":2,"text":"Notes"}]}},"_type":"markdown","_id":"content:0.code:6.FP(Functional programming)簡易釐清 (含Currying 與 Closure 理解).md","_source":"content","_file":"0.code/6.FP(Functional programming)簡易釐清 (含Currying 與 Closure 理解).md","_extension":"md"},{"_path":"/code/_dir","_dir":"code","_draft":false,"_partial":true,"_locale":"","title":"Codesnese","icon":"🧑‍💻","_id":"content:0.code:_dir.yml","_type":"yaml","_source":"content","_file":"0.code/_dir.yml","_extension":"yml"}]