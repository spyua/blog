{"_path":"/lesson-learn/api-key-credential-management","_dir":"lesson-learn","_draft":false,"_partial":false,"_locale":"","title":"Api Key Credential Management","description":"","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"api-key-credential-management"},"children":[{"type":"text","value":"Api Key Credential Management"}]},{"type":"element","tag":"h2","props":{"id":"情境"},"children":[{"type":"text","value":"情境"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"實務上串接時需串別的部門Notify服務，但中間要過Gateway，需要跟Gatway所屬部門申請認證Key，但這Key是人工核發的，稍微思考一下Best Practice是什麼。"}]},{"type":"element","tag":"h2","props":{"id":"疏離"},"children":[{"type":"text","value":"疏離"}]},{"type":"element","tag":"h3","props":{"id":"角色轉換思考"},"children":[{"type":"text","value":"角色轉換思考"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我有一個Gateway服務系統，會去串不同部門的服務。其他系統經過我們Gateway服務系統時需要帶我們給的API certifaied Key做認證識別。目前我們這個API certifaied Key是人工核發. 我覺得設計不太好。因為Key期限要到的時候還要人工去處理。"}]},{"type":"element","tag":"h3","props":{"id":"設計合理性"},"children":[{"type":"text","value":"設計合理性"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"針對情境去做最適應思考設計，所以沒有一個絕對答案。我覺得最方便的做法是OAuth 2.0 的 Client Credentials Grant Flow 認證。但實作OAuth 2.0 設計會牽扯很多工作項目，如果是API Key認證，相對起來設計比較簡單沒錯。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"先來考慮Context情境目前看來設計上會有些考量"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"公司大多會是內網環境，如果只是內網環境。人工替換Key目前問起來也算常見。但對於ITIL 或是ISO 20000在IT治理管理上會是優化項目。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"如果系統對外，最好方法當然是照OAuth Flow設計。如果還是想堅持使用API Key，除了防火牆，在金鑰演算法部分應該都是需要被審核設計。"}]}]},{"type":"element","tag":"h3","props":{"id":"google-的-api-金鑰管理最佳實踐"},"children":[{"type":"element","tag":"a","props":{"href":"https://cloud.google.com/docs/authentication/api-keys","rel":["nofollow"]},"children":[{"type":"text","value":"Google 的 API 金鑰管理最佳實踐"}]}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"限制 API 金鑰的使用範圍："},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"API 限制：將金鑰限制為只能存取特定的 API，避免未經授權的使用。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"應用程式限制 : 限制哪些應用程式或 IP 位址可以使用該金鑰，確保只有授權的系統能夠存取。"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"定期輪替和撤銷金鑰"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"定期更新：定期更新 API 金鑰，減少因金鑰洩漏而帶來的風險。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"即時撤銷 : 當發現金鑰可能被濫用時，應立即撤銷並重新發佈新的金鑰。"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"監控和配額管理"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"監控使用情況 : 監控追蹤 API 金鑰的使用情況，及時發現異常活動。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"設定配額限制 : 為 API 設定使用配額，防止濫用並控制成本。"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"使用更安全的認證方式"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"OAuth 2.0 : 對於需要更高安全性的應用，建議使用 OAuth 2.0 等更安全的認證方式，提供細緻的存取控制。"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"透過遵循上述最佳實踐，可以有效地管理 API 金鑰，確保系統的安全性和穩定性。"}]},{"type":"element","tag":"h3","props":{"id":"api-key-自動化更新"},"children":[{"type":"text","value":"API Key 自動化更新"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"輪替機制（Key Rotation）"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"使用腳本或服務，定期生成新金鑰並將其更新到需要使用的系統。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"確保新金鑰啟用前，舊金鑰依然有效一段時間，避免中斷服務。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"設置一個自動更新週期（例如每 30 天）。"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Endpoint 配合更新"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"提供一個安全的 API Endpoint，例如 /refresh-api-key。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"使用該 Endpoint 提供\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"新的 API Key：返回新的有效金鑰。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"舊金鑰的失效時間：明確舊金鑰將何時失效，給客戶端留足緩衝時間。"}]}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"雙金鑰模式（Dual-Key Approach）"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"無縫切換 : 允許新舊金鑰同時有效一段時間，確保應用程式有時間切換到新金鑰。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"應用檢測 : *客戶端可定期檢查是否需要切換到新金鑰。"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"結合安全傳輸與存儲"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"TLS 保護：確保 API Key 傳輸時的安全性。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"密文存儲：在伺服器和客戶端，對 API Key 進行加密存儲。"}]}]}]}]},{"type":"element","tag":"h3","props":{"id":"是否實作自動化更新"},"children":[{"type":"text","value":"是否實作自動化更新?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"推薦理由:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"業務規模大，需要頻繁發佈和管理 API Key，人工管理成本高。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"技術基礎強，有能力實作並維護一個穩定、安全的金鑰管理系統。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"不推理由:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"系統簡單，如只有少量用戶，人工管理可能更直觀。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"資源不足，無法提供足夠的開發和安全測試資源。"}]}]},{"type":"element","tag":"h3","props":{"id":"改善計畫設想"},"children":[{"type":"text","value":"改善計畫設想"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"短期 : 建立標準化的申請表單和流程，實作基本的金鑰管理系統與建立即時監控機制\n中期 : 開發自助服務平台， 實作自動化的審核流程與建立金鑰輪換機制\n長期 : 建立完整的金鑰生命週期管理，實作分層式金鑰架構與整合公司的身分識別系統"}]},{"type":"element","tag":"h4","props":{"id":"金鑰生命週期管理參考"},"children":[{"type":"text","value":"金鑰生命週期管理參考"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"KM-lifecycle-cropped","src":"/blog/images/100/apikeycredential/KM-lifecycle-cropped.jpg"},"children":[]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Creation（創建）: 金鑰的生成階段，系統會依據特定的加密演算法和資安需求來產生新的加密金鑰。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Backup (備份) : 為了資安措施，金鑰匙產生後須立即進行備份，一般會放在硬體安全模組（HSM）中，雲端會放到類似雲端金鑰管理服務（如 AWS KMS、Google Cloud KMS）。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Deployment（佈署）: 這個階段是將金鑰實際部署到運作環境中。金鑰會被安全地散佈給需要使用的系統或使用者。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Monitoring (監控) : 當金鑰開始使用後，需要持續進行監控。系統會追蹤金鑰的使用狀況，檢查是否有異常存取模式或潛在的資安威脅。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Rotation (更換) : 為了維持資安，金鑰需要定期更換。這就像定期更新 SSL 憑證一樣，可以降低金鑰被破解的風險。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Expiration (過期) : 每個金鑰都有其設定的有效期限。當金鑰達到期限時，系統會將其標記為過期。這類似於 SSL 憑證的到期日，提醒管理員進行更新。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Archival (封存) : 過期的金鑰不會立即被刪除，而是先進行封存。這些金鑰可能還需要用來解密歷史資料。就像我們會保存舊系統的存取金鑰，以備日後需要查看歷史資料。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Destruction (銷毀) : 這是金鑰生命週期的最終階段。當確定金鑰真的不再需要時，會以安全的方式將其永久刪除。這個過程必須徹底，確保金鑰無法被還原，就像是要確實清除硬碟中的敏感資料。"}]}]},{"type":"element","tag":"h4","props":{"id":"分層式金鑰架構"},"children":[{"type":"text","value":"分層式金鑰架構"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"分層式金鑰架構是一種多層次的金鑰管理策略，目的是簡化金鑰管理並增強系統的安全性。該架構通常包含以下層次："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"根金鑰（Root Key），金鑰層次的最頂層，用於保護其他金鑰（通常存儲在 HSM 中）。 用途用於加密或導出中間金鑰，基本上存放在銀行總行的硬體安全模組(HSM)中，用於生成各分行的加密金鑰。壽命長、但受限使用(根金鑰並不直接參與業務層的加密操作，而是僅用於保護其他金鑰（如中間金鑰）的生成和加密。)。"}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"根金鑰存儲在 HSM 中，HSM 是一種專用硬體，用於保護密碼學材料。確保根金鑰無法以明文形式從設備中導出。"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"中間金鑰 （Intermediate Key），位於根金鑰與工作金鑰之間的中間層。進一步加密或生成工作金鑰，提供多層次保護。例如各分行用於加密其客戶交易資料的主要金鑰。壽命較短，用於區域或業務域隔離。"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"區域隔離，不同的地理區域使用獨立的中間金鑰來保護當地生成的工作金鑰（Working Key）。例如某些國家或地區對數據加密有數據主權要求，必須確保加密金鑰僅存在於當地數據中心。設計上可以每個區域（如美國、歐洲、亞洲）都有自己的中間金鑰。根金鑰位於全局共享的 HSM，並對這些中間金鑰進行保護。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"業務域隔離，不同的業務線或應用場景使用各自的中間金鑰，確保即使某個金鑰層被攻擊，也不會影響其他業務域。例如將不同的金鑰分配給支付系統、交易記錄、客戶數據等業務域。舉個例子，SaaS 平台中，為每個客戶分配獨立的中間金鑰。"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"工作金鑰（Working Key），直接用於加密、解密、簽名或驗證的金鑰。足具體業務需求，如 API 認證、加密資料傳輸等。壽命最短，且需定期輪替。"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"情境","depth":2,"text":"情境"},{"id":"疏離","depth":2,"text":"疏離","children":[{"id":"角色轉換思考","depth":3,"text":"角色轉換思考"},{"id":"設計合理性","depth":3,"text":"設計合理性"},{"id":"google-的-api-金鑰管理最佳實踐","depth":3,"text":"Google 的 API 金鑰管理最佳實踐"},{"id":"api-key-自動化更新","depth":3,"text":"API Key 自動化更新"},{"id":"是否實作自動化更新","depth":3,"text":"是否實作自動化更新?"},{"id":"改善計畫設想","depth":3,"text":"改善計畫設想"}]}]}},"_type":"markdown","_id":"content:100.lesson-learn:Api Key Credential Management.md","_source":"content","_file":"100.lesson-learn/Api Key Credential Management.md","_extension":"md"}