{"_path":"/architecture/ddd-module","_dir":"architecture","_draft":false,"_partial":false,"_locale":"","title":"DDD實戰-Module","description":"","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"ddd實戰-module"},"children":[{"type":"text","value":"DDD實戰-Module"}]},{"type":"element","tag":"h3","props":{"id":"一關於module"},"children":[{"type":"text","value":"一、關於Module"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在闡述Module前，讓我們先來比對非物件化設計與物件化設計的差異性。看到下圖左，在非物件化的傳統設計，資料與方法操作上是整個拆開設計，在資料流複雜外我們可以看相依性高，偶合的狀況也較高。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"接著討論物件化設計部分，先不論封裝等物件操作技巧，單純根據資料與方法關係設計出物件(物件特性:資料(Data) 物件行為:方法(Function))，我們可以看到原本互相依賴的Fun關係可各自獨立使用，在資料流上也較為單純。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"Data Fun vs Obj","src":"/blog/images/01/01/001.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"物件化後，雖然在資料操作面上簡化許多，但隨著專案功能性逐漸增加，物件與功能處理流程上會趨近越複雜，如下圖為一個簡易的系統，此系統根據外部Sensor系統獲取、過濾與計算資料，在沒模組化的設計前提，可以看到Control與Data Flow呈現一個較零散的關係狀態"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"Control && Data Flow","src":"/blog/images/01/01/002.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"此時我們根據Sensor功能額外設計一個Sensor模組如下，此時我們就可以針對Sensor相對應的資料模組將之封裝在模組內，此模組對外則就單純開放運算(calculation)與過濾(filtering)的功能。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"模組化後可以明顯看出控制與資料流的彼此相依性值，因此降低了修改與擴充狀況的互相影響性值。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"Control && Data Flow 2","src":"/blog/images/01/01/003.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"模組化指是將"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"系統功能程序作分離獨立(特定功能class的容器)"}]},{"type":"text","value":"，除了功能獨立外，也強調設計上可以根據功能隨意抽換模組。達到高內聚、低耦合的目的，進而提高開發者的生產力(將複雜的功能拆分管理)。並讓程式碼能夠透過引用的方式來重複使用，提升重用性(Reusable)"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Modular design allows code to remain agile in the face of ever-changing requirements."}]}]},{"type":"element","tag":"hr","props":{"id":""},"children":[]},{"type":"element","tag":"h3","props":{"id":"二構成module考量五要素"},"children":[{"type":"text","value":"二、構成Module考量五要素"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Propose:Module功能目標單一職責，盡量不要與其他模組設計有太多相依關係。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Interface:模組功能API所提供使用方式要簡潔易懂，通常User不需要去了解實際內部的實作方式，只需專注在確定輸入什麼，會輸出什麼可達到什麼功能。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Encapsulation:封裝模組，除了讓不暴露資料結構讓使用者亂使用外，對於在修改細節上也能較不容易直接影響使用端。另外再使用抽象實作上，物件抽象化多少還是難以避免Leaky Abstractions的問題。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Implementation:實作上除了考量功能正確性外還需考慮效能、測試與功能架構程式碼最小化。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Connection(關聯性):呼應Propose功能單一職責，將與其他模組相依性最小化。"}]}]},{"type":"element","tag":"hr","props":{"id":"_1"},"children":[]},{"type":"element","tag":"h3","props":{"id":"三package-vs-module"},"children":[{"type":"text","value":"三、Package Vs Module"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在了解Module構成要素後~隨著專案模組(Module)的增加，將難以管理及問題的追蹤，這時候就能將模組(Module)打包成套件(Package)，利用其階層式的結構來彈性規劃模組(Module)。"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Module:單一功能模組"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Package:多Module組成"}]}]},{"type":"element","tag":"h3","props":{"id":"四一般module設計方法"},"children":[{"type":"text","value":"四、一般Module設計方法"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在非以領域事件為出發點的設計上，大部分狀況會根據功能設計成物件與介面使用。下圖為Zebra SDK Package的Module列項，我們可以大致分得出，他的Module設計就是根據功能性值去區分(graphics, certificate...)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"由功能性區分","src":"/blog/images/01/01/004.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"接著我們點近discovery看提供什麼API功能，可以看到可以使用的介面功能以及相關功能可使用的功能物件。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"由功能性區分2","src":"/blog/images/01/01/005.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在點進個別更詳細功能介紹，我們就會看到這物件功能具有什麼資料特質、物件實體化須提供什麼參數以及此物件可使用哪些方法。"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Field: address，IP or Mac Adress"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Constructor:物件實體化須提供印表機的IP or Mac Adress"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Method:可使用的物件功能，在此例看起來需實作getConnection功能"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"由功能性區分3","src":"/blog/images/01/01/006.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"上述為印表機找到印表機裝置功能的模組化介紹"}]},{"type":"element","tag":"hr","props":{"id":"_2"},"children":[]},{"type":"element","tag":"h3","props":{"id":"五未使用ddd的一般service服務設計"},"children":[{"type":"text","value":"五、未使用DDD的一般Service服務設計"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"上述一般Module設計概念聊完，在聊DDD Module設計之前先來聊一下在一般未使用DDD領域設計的服務系統會如何設計。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在對大部分的開發者，一開始習慣設計都以數據為考量的集中式設計架構。設計架構上會出現比較常見到的分層式設計，大致分成Controller, Service, Repositories, Models"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"xxx/Model\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"數據庫Model、Request Model, Response Model"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"xxx/Controller\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"給Client端的API第一時間接口，提供Get,Post,Delete,Update API。除了此在此層一般都會安插屬性驗證Client第一時間傳過來的資料是否正確。並作實際的DTO(Object 與DB Model Mapping)轉換。"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"xxx/Service\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"這層基本上就是作商業邏輯的處哩，進到此層的資料基本上都是做完DTO轉換，在此層通常會作實際的資料邏輯處理處理完後再往DB方向送。"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"xxx/Repositorie\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"DataSource(DBContext)上一層，一般會除了實際面DataSource讀寫變更操作外，Source 資料Join處理也會在此層處理。一般多這一層都是為了隔開DataSource的來源切換，不管置換不同的DB系統，或是Source改成Shared Prefs，都可快速置換資料來源。"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"一般單體架構","src":"/blog/images/01/01/007.png"},"children":[]}]},{"type":"element","tag":"hr","props":{"id":"_3"},"children":[]},{"type":"element","tag":"h3","props":{"id":"六在ddd世界中的module設計"},"children":[{"type":"text","value":"六、在DDD世界中的Module設計"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"上述稍微帶過Module的設計概念後，接著探討在DDD世界裡，Module的設計概念如何~大致分成幾個探討議題"}]},{"type":"element","tag":"h4","props":{"id":"_1ddd設計步驟流程"},"children":[{"type":"text","value":"1.DDD設計步驟流程"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"事件風暴","src":"/blog/images/01/01/008.png"},"children":[]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"在探討需求架構DDD設計的第一步，就是根據需求情境列出事件風暴(Event storming)，並在事件風暴中的用戶操作、事件、以及依賴關係根據這些要素設計歸納出領域與實體。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"接著第二步在領域實體之間找尋彼此務的關聯性，將具有相關的實體組合成聚合(Aggregate)，同時確定聚合根(Aggregate Root)。在聚合根行程時，基本上第一層邊界(邏輯邊界-虛線)也會跟著產生，他們會在同一個服務器中運行。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"當聚合規劃好後~會根據業務及語意邊界等因素，將一個或多個聚合規劃訂製在一個限界上下文內(服務邊界)，形成領域模型。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"聚合","src":"/blog/images/01/01/009.png"},"children":[]}]},{"type":"element","tag":"h4","props":{"id":"_2程式碼一級目錄架構"},"children":[{"type":"text","value":"2.程式碼一級目錄架構"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"一級目錄架構","src":"/blog/images/01/01/010.png"},"children":[]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Interface(API Interface)\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"給使用者API介面，使用者透過Restful請求，將資料傳到此層，解析用戶傳送的請求資訊，資料的組裝、資料傳輸格式以及 Facade 介面等代碼都會放在這一層目錄裡。"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Application\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"他有點像是原先集中式設計Service的功能，實作所有相依於指定前端之使用案例的地方。 例如，與 Web API 服務相關的實作。若使用的是 CQRS 方法，它便會包含查詢、微服務接受的命令，甚至是微服務之間的事件驅動通訊 (整合事件)。"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Domain\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"它主要存放領域層核心業務邏輯相關的代碼。領域層可以包含多個聚合代碼包，它們共同實現領域模型的核心業務邏輯。聚合以及聚合內的實體、方法、領域服務和事件等代碼會放在這一層目錄裡。"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Infrastructure\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"它主要存放基礎資源服務相關的代碼，為其它各層提供的通用技術能力、三方套裝軟體、資料庫服務、配置和基礎資源服務的代碼都會放在這一層目錄裡。"}]}]}]}]},{"type":"element","tag":"h4","props":{"id":"_3在ddd-module準則"},"children":[{"type":"text","value":"3.在DDD Module準則"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"例子:如何對電商平台上的顧客進行模塊設計"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"對於顧客來說，一般須要維護顧客的"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"個人訊息"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"收穫地址"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"付款方法"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"這三個之間的關係是緊密相關，不可獨立存在，我們根據這三點抽象出三個Aggregate"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Customer 個人訊息"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"AddressBook 收穫地址"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Wallet 付款方法"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"那該如何去放置這些Aggregate，是針對每一個Aggregate作資料夾分類還是這三個Aggregate放同一格資料夾?基本上這三個Aggregate就是一個Custer Module，所以都會放到Custer Module資料夾內。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"Custer Module資料夾","src":"/blog/images/01/01/011.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"當整理出Aggregate與Module後，接著會開始根據各Module去實作事件應用處理"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"基本上我們在DDD模塊的設計上有幾個注意要點"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Module應該要和Domain概念一致:一般一組聚合集成(領域)，我們會相對應建立一個Module。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"根據通用語言來命名:模組命名要一眼就看出這是在做什麼的。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"模組設計盡量鬆偶合:盡量與其他模組不要有太多的偶合，若有也許在領域設計上還沒切得很乾淨。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"如果有PeerModule或父子Module出現，盡量避免循環相依。"}]}]},{"type":"element","tag":"h4","props":{"id":"_4關於module命名"},"children":[{"type":"text","value":"4.關於Module命名"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"Module命名","src":"/blog/images/01/01/012.png"},"children":[]}]},{"type":"element","tag":"h4","props":{"id":"_5module界線與限界上下文不同"},"children":[{"type":"text","value":"5.Module界線與限界上下文不同"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"為了對領域模型中進行準確建模，需要將領域模型劃分成多個子域，每個子域對應一個或多個限界區域。 模塊。所以，從子域到限界某些再到模塊，應該是依次包含關係。"}]},{"type":"element","tag":"h3","props":{"id":"補充"},"children":[{"type":"text","value":"補充"}]},{"type":"element","tag":"h4","props":{"id":"補充一"},"children":[{"type":"text","value":"補充一"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Abstracion:\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"將真實世界物體與事件的大量資訊縮減一個概念或是一個現象的資訊含量來將其廣義化，保存和一特定目的有關的資訊。例如，將一個皮製的足球抽象化成一個球，只保留一般球的屬性(形狀)和行為(滾)等資訊。"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Leaky Abstractions\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"所有非不證自明的抽象概念，都有某種程度的疏漏。例如TCP雖簡化(抽象化)網路行為，設計上也保證網路傳送過程中不遺漏資訊，但不保證就真的能完整傳到資訊，例如我們無法避開海底電纜被魚咬斷因此斷訊的狀況。"}]}]}]}]},{"type":"element","tag":"h3","props":{"id":"參考"},"children":[{"type":"text","value":"參考"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/kgrzybek/modular-monolith-with-ddd#32-module-level-view","rel":["nofollow"]},"children":[{"type":"text","value":"範例"}]},{"type":"element","tag":"a","props":{"href":"https://shanebdavis.medium.com/the-5-essential-elements-of-modular-software-design-6b333918e543","rel":["nofollow"]},"children":[{"type":"text","value":"The 5 Essential Elements of Modular Software Design"}]},{"type":"element","tag":"a","props":{"href":"https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/","rel":["nofollow"]},"children":[{"type":"text","value":"The Law of Leaky Abstractions"}]},{"type":"element","tag":"a","props":{"href":"https://nordicapis.com/the-three-principles-of-excellent-api-design/","rel":["nofollow"]},"children":[{"type":"text","value":"The Three Principles of Excellent API Design"}]},{"type":"element","tag":"a","props":{"href":"https://www.learncodewithmike.com/2020/01/python-module-and-package.html","rel":["nofollow"]},"children":[{"type":"text","value":"解析Python模組(Module)和套件(Package)的概念"}]},{"type":"element","tag":"a","props":{"href":"http://www.the-software-experts.com/e_dta-sw-design-module.php","rel":["nofollow"]},"children":[{"type":"text","value":"Module Design"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://devblogs.microsoft.com/cesardelatorre/domain-events-vs-integration-events-in-domain-driven-design-and-microservices-architectures/","rel":["nofollow"]},"children":[{"type":"text","value":"Domain Events vs. Integration Events in Domain-Driven Design and microservices architectures"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.cnblogs.com/sheng-jie/p/7266557.html","rel":["nofollow"]},"children":[{"type":"text","value":"DDD理论学习系列（13）-- 模块"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.cnblogs.com/sheng-jie/p/6931646.html","rel":["nofollow"]},"children":[{"type":"text","value":"DDD理论学习系列——案例及目录"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"一關於module","depth":3,"text":"一、關於Module"},{"id":"二構成module考量五要素","depth":3,"text":"二、構成Module考量五要素"},{"id":"三package-vs-module","depth":3,"text":"三、Package Vs Module"},{"id":"四一般module設計方法","depth":3,"text":"四、一般Module設計方法"},{"id":"五未使用ddd的一般service服務設計","depth":3,"text":"五、未使用DDD的一般Service服務設計"},{"id":"六在ddd世界中的module設計","depth":3,"text":"六、在DDD世界中的Module設計"},{"id":"補充","depth":3,"text":"補充"},{"id":"參考","depth":3,"text":"參考"}]}},"_type":"markdown","_id":"content:1.architecture:1.DDD實戰-Module.md","_source":"content","_file":"1.architecture/1.DDD實戰-Module.md","_extension":"md"}